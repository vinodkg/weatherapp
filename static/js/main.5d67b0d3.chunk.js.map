{"version":3,"sources":["services/webservices.js","component/weathersearch/weathersearch.js","component/weatherresults/weatherresults.js","component/weather/weather.js","serviceWorker.js","index.js"],"names":["WebServices","_defaul_config","headersList","headers","Headers","header","append","url","options","fetch","then","response","json","WeatherSearch","serverUrl","appId","units","state","cityName","updateCityName","event","_this","setState","target","value","_this2","this","react_default","a","createElement","className","type","placeholder","onChange","onClick","getWeatherDetails","_this3","webServices","get","console","log","cod","props","result","alert","message","_cityName","React","Component","WeatherResults","getTemp","property","main","weather","icon","src","alt","Weather","updateResults","results","weathersearch_WeatherSearch","weatherresults_WeatherResults","Boolean","window","location","hostname","match","ReactDOM","render","weather_weather","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d67b0d3.chunk.js","sourcesContent":["export default class WebServices {\n    _defaul_config = {\n\n    };\n\n    _getHeaders(headersList) {\n        let headers = new Headers();\n        for(let header in headersList){\n            headers.append(header[\"key\"], header[\"value\"]);\n        }\n        return headersList;\n    }\n    \n    _getInitConfig(){\n\n    }\n\n    get(url, options){\n        return fetch(url)\n                .then(response => response.json());\n    }\n}","import React from 'react';\nimport WebServices from './../../services/webservices';\n\nexport default class WeatherSearch extends React.Component {\n\n    serverUrl = \"http://api.openweathermap.org/data/2.5/weather\";\n    appId = \"5536f021b58776944ade38cabdf28b46\";\n    units = \"metric\";\n    \n    get cityName(){\n        return this._cityName;\n    }\n\n    set cityName(value){\n        this._cityName = value;\n    }\n\n    state = {\n        \"cityName\" : \"Berlin\"\n    }\n\n    render() {\n        return (\n            <div className=\"search-city\">\n                <div className=\"input-group\">\n                    <input type=\"text\" className=\"custom-input\" placeholder=\"City Name\" value={this.state.cityName} onChange={this.updateCityName}/>\n                    <div className=\"input-group-append\">\n                        <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => this.getWeatherDetails()}>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    componentDidMount(){\n        this.getWeatherDetails();\n    }\n\n    updateCityName = (event) => {\n        this.setState({\n            \"cityName\" : event.target.value\n        });\n    }\n\n    getWeatherDetails(){\n        const webServices = new WebServices();\n        let url = this.serverUrl + \"?q=\" + this.state.cityName + \"&APPID=\" + this.appId  + \"&units=\" + this.units;\n        let fetchRequest = webServices.get(url, {});\n        fetchRequest.then((response) => {\n            console.log(response);\n            if(response.cod === 200){\n                this.props.result(response);\n            }else{\n                alert(response.message);\n            } \n        });\n    }\n}","import React from \"react\";\nimport \"./weatherresults.css\"\n\nexport default class WeatherResults extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm current-weather-image\">\n                        <img src={this.getWeatherDetails(\"icon\")} alt=\"404\" />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm current-temp\">\n                        {this.getTemp(\"temp\")} <sup>o</sup>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-6 current-temp-range\">\n                        {this.getTemp(\"temp_min\")} <sup>o</sup>\n                    </div>\n                    <div className=\"col-6 current-temp-range\">\n                        {this.getTemp(\"temp_max\")} <sup>o</sup>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm weather-main\">\n                        {this.getWeatherDetails(\"main\")}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm weather-desc\">\n                        {this.getWeatherDetails(\"description\")}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    getTemp = (property) => {\n        if(!this.props.result.main){\n            return \"-\";\n        }\n        if(property){\n            return this.props.result.main[property];\n        }\n    }\n\n    getWeatherDetails = (property) => {\n        if(!this.props.result.weather){\n            return \"\";\n        }\n        if(property === \"icon\"){\n            return \"http://openweathermap.org/img/wn/\" + this.props.result.weather[0].icon + \"@2x.png\";\n        }\n        return this.props.result.weather[0][property];\n    }\n}","import React from 'react';\nimport \"./weather.css\";\nimport WeatherSearch from '../weathersearch/weathersearch';\nimport WeatherResults from '../weatherresults/weatherresults';\n\n\n\nclass Weather extends React.Component{\n    state = {\n        \"result\" : {}\n    }\n\n    updateResults = (results) => {\n        this.setState({\n            \"result\" : results\n        });\n        console.log(\"Updated results - \" + results);\n    }\n\n    render() {\n        return (\n            <div className=\"weather-body\">\n                <WeatherSearch result={this.updateResults}/>\n                <WeatherResults result={this.state.result}/>\n            </div>\n        );\n    }\n}\nexport default Weather;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Weather  from './component/weather/weather';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\nReactDOM.render(<Weather />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}